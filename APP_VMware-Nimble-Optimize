## <copyright file="Set-VMwarePSP.ps1" company="NimbleStorage">
## Copyright (c) 2013 All Right Reserved, http://www.nimblestorage.com/
##
## THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
## KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
## PARTICULAR PURPOSE.
##
## </copyright>
## <author>Adam Herbert</author>
## <email>aherbert@nimblestorage.com</email>
## <date>2013-03-12</date>
## <summary>Sets RoundRobin PSP rule for Nimble Storage volumes and applies policy to existing volumes</summary>

if ((Get-PSSnapin -Name VMware.VimAutomation.Core -ErrorAction SilentlyContinue) -eq $null) {
  try {
    Add-PSSnapin VMware.VimAutomation.Core -ErrorAction Stop
  }
  catch {
    Write-Host "Please install VMware PowerCLI"
    Return
  }
}

# Get VCMS server address
if ($args[0] -ne $null) {
  $vcms_ip = $args[0]
}
else {
  $vcms_ip = Read-Host "Please enter vCenter Server hostname or IP"
}

# Connect to VCMS and get list of hosts
try {
  Connect-VIServer -Server $vcms_ip
  $vmhosts = Get-VMHost -ErrorAction Stop
}
catch {
  Write-Host "Could not connect to vCenter (" $vcms_ip ") and get hosts" $?
  Return
}

# Loop through hosts and set MPIO options
foreach ($vmhost in $vmhosts) {
  Write-Host "Setting MPIO settings on" $vmhost.Name
  try {
    $esxcli = Get-EsxCli -VMhost $vmhost -ErrorAction Stop
  }
  catch {
    Write-Host "Could not open EsxCli session. Could be an ESX 4.x host."
    Continue
  }

  # Test if host is version 4 or 5
  if ($vmhost.Version -match "^4\.") {
    # ESX 4.1
    try {
      if ($esxcli.nmp.satp.addrule($null, $null, $null, $null, $null, $null, $null, "VMW_PSP_RR", $null, "VMW_SATP_ALUA", $null, "Nimble") -eq $true) {
        Write-Host "Added rule for Nimble volumes to use RoundRobin PSP"
      }
    }
    catch {
      Write-Host "Rule for Nimble volumes to use RoundRobin PSP is in place"
    }
      
    foreach ($lun in Get-ScsiLun -VmHost $vmhost | ? {$_.Vendor -eq "Nimble" }) {
      Write-Host "Setting MPIO settings for volume" $lun.CanonicalName
      $esxcli.nmp.device.setpolicy($null, $lun.CanonicalName, "VMW_PSP_RR") | Out-Null
      $esxcli.nmp.psp.setconfig("policy=iops;iops=0", $lun.CanonicalName, $null) | Out-Null
    }
  }
  elseif ($vmhost.Version -match "^5\.") {
    # ESX 5  
    try {
      if ($esxcli.storage.nmp.satp.rule.add($null, $null, $null, $null, $null, $null, $null, $null, "VMW_PSP_RR", $null, "VMW_SATP_ALUA", $null, $null, "Nimble") -eq $true) {
        Write-Host "Added rule for Nimble volumes to use RoundRobin PSP"
      }
    }
    catch {
      Write-Host "Rule for Nimble volumes to use RoundRobin PSP is in place"
    }
      
    foreach ($lun in Get-ScsiLun -VmHost $vmhost | ? {$_.Vendor -eq "Nimble" }) {
      Write-Host "Setting MPIO settings for volume" $lun.CanonicalName
      if ($vmhost.Version -match "^5\.0") {
        $esxcli.storage.nmp.device.set($null, $lun.CanonicalName, "VMW_PSP_RR") | Out-Null
        $esxcli.storage.nmp.psp.roundrobin.deviceconfig.set(262144, $lun.CanonicalName, 0, "iops", $null) | Out-Null
      }
      else {
        $esxcli.storage.nmp.device.set($false, $lun.CanonicalName, "VMW_PSP_RR") | Out-Null
        $esxcli.storage.nmp.psp.roundrobin.deviceconfig.set(262144, $null, $lun.CanonicalName, 0, "iops", $null) | Out-Null
      }
    } 
  }
  else {
    Write-Host "Could not validate ESX version for host" $vmhost.Name
  }
  Write-Host "----"
}

# Logout of the VCMS
Disconnect-VIServer -Confirm:$false -ErrorAction SilentlyContinue

# SIG # Begin signature block
# MIIQfQYJKoZIhvcNAQcCoIIQbjCCEGoCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUfr00kGZ0MUGnm2Aza7Hn/0mr
# Xq6ggg2yMIIGcDCCBFigAwIBAgIBJDANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQG
# EwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERp
# Z2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2Vy
# dGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDcxMDI0MjIwMTQ2WhcNMTcxMDI0MjIw
# MTQ2WjCBjDELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzAp
# BgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25pbmcxODA2BgNV
# BAMTL1N0YXJ0Q29tIENsYXNzIDIgUHJpbWFyeSBJbnRlcm1lZGlhdGUgT2JqZWN0
# IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyiOLIjUemqAbPJ1J
# 0D8MlzgWKbr4fYlbRVjvhHDtfhFN6RQxq0PjTQxRgWzwFQNKJCdU5ftKoM5N4YSj
# Id6ZNavcSa6/McVnhDAQm+8H3HWoD030NVOxbjgD/Ih3HaV3/z9159nnvyxQEckR
# ZfpJB2Kfk6aHqW3JnSvRe+XVZSufDVCe/vtxGSEwKCaNrsLc9pboUoYIC3oyzWoU
# TZ65+c0H4paR8c8eK/mC914mBo6N0dQ512/bkSdaeY9YaQpGtW/h/W/FkbQRT3sC
# pttLVlIjnkuY4r9+zvqhToPjxcfDYEf+XD8VGkAqle8Aa8hQ+M1qGdQjAye8OzbV
# uUOw7wIDAQABo4IB6TCCAeUwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
# AQYwHQYDVR0OBBYEFNBOD0CZbLhLGW87KLjg44gHNKq3MB8GA1UdIwQYMBaAFE4L
# 7xqkQFulF2mHMMo0aEPQQa7yMD0GCCsGAQUFBwEBBDEwLzAtBggrBgEFBQcwAoYh
# aHR0cDovL3d3dy5zdGFydHNzbC5jb20vc2ZzY2EuY3J0MFsGA1UdHwRUMFIwJ6Al
# oCOGIWh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3Nmc2NhLmNybDAnoCWgI4YhaHR0
# cDovL2NybC5zdGFydHNzbC5jb20vc2ZzY2EuY3JsMIGABgNVHSAEeTB3MHUGCysG
# AQQBgbU3AQIBMGYwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29t
# L3BvbGljeS5wZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29t
# L2ludGVybWVkaWF0ZS5wZGYwEQYJYIZIAYb4QgEBBAQDAgABMFAGCWCGSAGG+EIB
# DQRDFkFTdGFydENvbSBDbGFzcyAyIFByaW1hcnkgSW50ZXJtZWRpYXRlIE9iamVj
# dCBTaWduaW5nIENlcnRpZmljYXRlczANBgkqhkiG9w0BAQUFAAOCAgEAcnMLA3Va
# N4OIE9l4QT5OEtZy5PByBit3oHiqQpgVEQo7DHRsjXD5H/IyTivpMikaaeRxIv95
# baRd4hoUcMwDj4JIjC3WA9FoNFV31SMljEZa66G8RQECdMSSufgfDYu1XQ+cUKxh
# D3EtLGGcFGjjML7EQv2Iol741rEsycXwIXcryxeiMbU2TPi7X3elbwQMc4JFlJ4B
# y9FhBzuZB1DV2sN2irGVbC3G/1+S2doPDjL1CaElwRa/T0qkq2vvPxUgryAoCppU
# FKViw5yoGYC+z1GaesWWiP1eFKAL0wI7IgSvLzU3y1Vp7vsYaxOVBqZtebFTWRHt
# XjCsFrrQBngt0d33QbQRI5mwgzEp7XJ9xu5d6RVWM4TPRUsd+DDZpBHm9mszvi9g
# VFb2ZG7qRRXCSqys4+u/NLBPbXi/m/lU00cODQTlC/euwjk9HQtRrXQ/zqsBJS6U
# J+eLGw1qOfj+HVBl/ZQpfoLk7IoWlRQvRL1s7oirEaqPZUIWY/grXq9r6jDKAp3L
# ZdKQpPOnnogtqlU4f7/kLjEJhrrc98mrOWmVMK/BuFRAfQ5oDUMnVmCzAzLMjKfG
# cVW/iMew41yfhgKbwpfzm3LBr1Zv+pEBgcgW6onRLSAn3XHM0eNtz+AkxH6rRf6B
# 2mYhLEEGLapH8R1AMAo4BbVFOZR5kXcMCwowggc6MIIGIqADAgECAgIGzjANBgkq
# hkiG9w0BAQUFADCBjDELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0
# ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25pbmcx
# ODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDIgUHJpbWFyeSBJbnRlcm1lZGlhdGUg
# T2JqZWN0IENBMB4XDTEyMDcyOTIyNTAxMFoXDTE0MDczMTA2NTk1NlowgZExGTAX
# BgNVBA0TEHJyaVdETDZkejRzdTFuU1gxCzAJBgNVBAYTAlVTMRIwEAYDVQQIEwlU
# ZW5uZXNzZWUxEzARBgNVBAcTCkdyZWVuYnJpZXIxFTATBgNVBAMTDEFkYW0gSGVy
# YmVydDEnMCUGCSqGSIb3DQEJARYYYWRhbS5oLmhlcmJlcnRAZ21haWwuY29tMIIB
# IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4QdlmfR24YXQg4L9cuX/6owc
# LTZSv/YXQjCAkZXJxy1n77M8Q5wg/ByylDgLHwpXmdBDI/cYxIc5wk/Rr41Nav6m
# p99jGazEaYGiWisxv+oJAMc+XIwdCHht6cyDASoapiDIuyPkJvnKs8jL96ozXCyj
# JiGKZU0uQfFraD0QSmv2wNztg0VVGFxgYuJ/VTcQhDYRaJIo6NtBxbFSLlnQWAFb
# FIs1GUrK7Zd9yr/lWl4qEI8Cue1rlHcz+xG8Q0vmMIDjt2eSkjxJZRsJC+KeRMct
# YTfnlPB6QMB2pYOBcBagbgUtc9QkmUR5s0FVwcsn9CuYx43BckItMtvQw/ZOhwID
# AQABo4IDnTCCA5kwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwLgYDVR0lAQH/
# BCQwIgYIKwYBBQUHAwMGCisGAQQBgjcCARUGCisGAQQBgjcKAw0wHQYDVR0OBBYE
# FCuJvocvoz2bvxcCC0jvN0DE4zz+MB8GA1UdIwQYMBaAFNBOD0CZbLhLGW87KLjg
# 44gHNKq3MIICIQYDVR0gBIICGDCCAhQwggIQBgsrBgEEAYG1NwECAjCCAf8wLgYI
# KwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5wZGYwNAYI
# KwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL2ludGVybWVkaWF0ZS5w
# ZGYwgfcGCCsGAQUFBwICMIHqMCcWIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0
# aG9yaXR5MAMCAQEagb5UaGlzIGNlcnRpZmljYXRlIHdhcyBpc3N1ZWQgYWNjb3Jk
# aW5nIHRvIHRoZSBDbGFzcyAyIFZhbGlkYXRpb24gcmVxdWlyZW1lbnRzIG9mIHRo
# ZSBTdGFydENvbSBDQSBwb2xpY3ksIHJlbGlhbmNlIG9ubHkgZm9yIHRoZSBpbnRl
# bmRlZCBwdXJwb3NlIGluIGNvbXBsaWFuY2Ugb2YgdGhlIHJlbHlpbmcgcGFydHkg
# b2JsaWdhdGlvbnMuMIGcBggrBgEFBQcCAjCBjzAnFiBTdGFydENvbSBDZXJ0aWZp
# Y2F0aW9uIEF1dGhvcml0eTADAgECGmRMaWFiaWxpdHkgYW5kIHdhcnJhbnRpZXMg
# YXJlIGxpbWl0ZWQhIFNlZSBzZWN0aW9uICJMZWdhbCBhbmQgTGltaXRhdGlvbnMi
# IG9mIHRoZSBTdGFydENvbSBDQSBwb2xpY3kuMDYGA1UdHwQvMC0wK6ApoCeGJWh0
# dHA6Ly9jcmwuc3RhcnRzc2wuY29tL2NydGMyLWNybC5jcmwwgYkGCCsGAQUFBwEB
# BH0wezA3BggrBgEFBQcwAYYraHR0cDovL29jc3Auc3RhcnRzc2wuY29tL3N1Yi9j
# bGFzczIvY29kZS9jYTBABggrBgEFBQcwAoY0aHR0cDovL2FpYS5zdGFydHNzbC5j
# b20vY2VydHMvc3ViLmNsYXNzMi5jb2RlLmNhLmNydDAjBgNVHRIEHDAahhhodHRw
# Oi8vd3d3LnN0YXJ0c3NsLmNvbS8wDQYJKoZIhvcNAQEFBQADggEBAFDIXR2gROrL
# d6b5n8aGp8yf6Yv8gV/sn9ziTbccJwJ2GisDDgbWQjSsn0GnlEONO/3d1NPrkzZp
# XjHpA50mYZluu+SWNeUiMmlVPOLM7OzovndR/mzGnT5NzUx6kbwf7cuOqlVKgqbe
# 4B8qn0mMVK5A+pc3hJMSq9O9s2LzeTEA4LFcU1OkBvxRTJ5BEj/CHV8ydsMz1A6N
# vP1MSKix5lcZ8cxwXtJeXQnlZd9NXiMq4AD/SwUPS19PT8Z21lDkXN9ZneClML0B
# hYMQyxQjAEUx5yd2KSqc4Erfu33yHdh/Hxr7WV6+9Emu3VN5nLY4ef66dpCP/Jrn
# PCdlS/fzkX4xggI1MIICMQIBATCBkzCBjDELMAkGA1UEBhMCSUwxFjAUBgNVBAoT
# DVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmlj
# YXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDIgUHJpbWFyeSBJ
# bnRlcm1lZGlhdGUgT2JqZWN0IENBAgIGzjAJBgUrDgMCGgUAoHgwGAYKKwYBBAGC
# NwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor
# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQU3aKQth1/
# xC3dB7h/Z+0YPQ0h3ckwDQYJKoZIhvcNAQEBBQAEggEAfddz4MB+tdtSsKY6uew8
# a5RUvukZVQLdD6p5+7OmWE/FzSM/5JSS4lGSUbt5+3OL92H0DueGK58lxXGwXQos
# U6/ryHaRxyN+i8+87QINZjxnbzfpgTgia8/s8rmjH/XWEcFWJmMk4ejr5W9slPOt
# CQNUPtIyZgYAgGur1SEw1VaWrrmMUDI+Kf8VhQXp6fEBLPYdjenbU9WqNHwIoPsV
# 1BZ6mfiaep/Qjdhez4GbQ81wy32gcoDuTsI8WsTyXIXCDG+Dy7zUMnvXe120ujJK
# S/3kso1YQ7ag0lHpBDEPcbAPHIAAv3DSkYzx2KjPtVgxsLX1A18TCcpAaJTlQCAI
# BQ==
# SIG # End signature block
